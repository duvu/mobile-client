"use strict";
/*
 * Convert A String to Base64 String or Vice-Versa
 */
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Convert A String to Base64 String
 */
function transformStringToBase64(platformType, textString) {
    if (platformType == 'Android') {
        var text = new java.lang.String(textString);
        var data = text.getBytes('UTF-8');
        var base64String = android.util.Base64.encodeToString(data, android.util.Base64.DEFAULT);
        return base64String;
    }
    else if (platformType == 'iOS') {
        var text = NSString.stringWithString(textString);
        var data = text.dataUsingEncoding(NSUTF8StringEncoding);
        var base64String = data.base64EncodedStringWithOptions(0);
        return base64String;
    }
}
exports.transformStringToBase64 = transformStringToBase64;
/*
 * Convert A Base64 String to String
 */
function transformBase64ToString(platformType, base64String) {
    if (platformType == 'Android') {
        var data = android.util.Base64.decode(base64String, android.util.Base64.DEFAULT);
        var decodedString = new java.lang.String(data, java.nio.charset.StandardCharsets.UTF_8);
        return decodedString;
    }
    else if (platformType == 'iOS') {
        var decodedData = NSData.alloc().initWithBase64EncodedStringOptions(base64String, 0);
        var decodedString = NSString.alloc().initWithDataEncoding(decodedData, NSUTF8StringEncoding);
        return decodedString;
    }
}
exports.transformBase64ToString = transformBase64ToString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZTY0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmFzZTY0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFRSDs7R0FFRztBQUVILGlDQUF3QyxZQUFZLEVBQUUsVUFBVTtJQUU1RCxFQUFFLENBQUMsQ0FBQyxZQUFZLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQztRQUM1QixJQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsSUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzRixNQUFNLENBQUMsWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDL0IsSUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ25ELElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzFELElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RCxNQUFNLENBQUMsWUFBWSxDQUFDO0lBQ3hCLENBQUM7QUFDTCxDQUFDO0FBYkQsMERBYUM7QUFFRDs7R0FFRztBQUVILGlDQUF3QyxZQUFZLEVBQUUsWUFBWTtJQUU5RCxFQUFFLENBQUMsQ0FBQyxZQUFZLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQztRQUM1QixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25GLElBQU0sYUFBYSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFGLE1BQU0sQ0FBQyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsa0NBQWtDLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZGLElBQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUMvRixNQUFNLENBQUMsYUFBYSxDQUFDO0lBQ3pCLENBQUM7QUFDTCxDQUFDO0FBWEQsMERBV0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29udmVydCBBIFN0cmluZyB0byBCYXNlNjQgU3RyaW5nIG9yIFZpY2UtVmVyc2FcbiAqL1xuXG5kZWNsYXJlIGNvbnN0IGFuZHJvaWQ6IGFueTtcbmRlY2xhcmUgY29uc3QgamF2YTogYW55O1xuZGVjbGFyZSBjb25zdCBOU0RhdGE6IGFueTtcbmRlY2xhcmUgY29uc3QgTlNVVEY4U3RyaW5nRW5jb2Rpbmc6IGFueTtcbmRlY2xhcmUgY29uc3QgTlNTdHJpbmc6IGFueTtcblxuLypcbiAqIENvbnZlcnQgQSBTdHJpbmcgdG8gQmFzZTY0IFN0cmluZ1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1TdHJpbmdUb0Jhc2U2NChwbGF0Zm9ybVR5cGUsIHRleHRTdHJpbmcpIHtcblxuICAgIGlmIChwbGF0Zm9ybVR5cGUgPT0gJ0FuZHJvaWQnKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBuZXcgamF2YS5sYW5nLlN0cmluZyh0ZXh0U3RyaW5nKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRleHQuZ2V0Qnl0ZXMoJ1VURi04Jyk7XG4gICAgICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGFuZHJvaWQudXRpbC5CYXNlNjQuZW5jb2RlVG9TdHJpbmcoZGF0YSwgYW5kcm9pZC51dGlsLkJhc2U2NC5ERUZBVUxUKTtcbiAgICAgICAgcmV0dXJuIGJhc2U2NFN0cmluZztcbiAgICB9IGVsc2UgaWYgKHBsYXRmb3JtVHlwZSA9PSAnaU9TJykge1xuICAgICAgICBjb25zdCB0ZXh0ID0gTlNTdHJpbmcuc3RyaW5nV2l0aFN0cmluZyh0ZXh0U3RyaW5nKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRleHQuZGF0YVVzaW5nRW5jb2RpbmcoTlNVVEY4U3RyaW5nRW5jb2RpbmcpO1xuICAgICAgICBjb25zdCBiYXNlNjRTdHJpbmcgPSBkYXRhLmJhc2U2NEVuY29kZWRTdHJpbmdXaXRoT3B0aW9ucygwKTtcbiAgICAgICAgcmV0dXJuIGJhc2U2NFN0cmluZztcbiAgICB9XG59XG5cbi8qXG4gKiBDb252ZXJ0IEEgQmFzZTY0IFN0cmluZyB0byBTdHJpbmdcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtQmFzZTY0VG9TdHJpbmcocGxhdGZvcm1UeXBlLCBiYXNlNjRTdHJpbmcpIHtcblxuICAgIGlmIChwbGF0Zm9ybVR5cGUgPT0gJ0FuZHJvaWQnKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhbmRyb2lkLnV0aWwuQmFzZTY0LmRlY29kZShiYXNlNjRTdHJpbmcsIGFuZHJvaWQudXRpbC5CYXNlNjQuREVGQVVMVCk7XG4gICAgICAgIGNvbnN0IGRlY29kZWRTdHJpbmcgPSBuZXcgamF2YS5sYW5nLlN0cmluZyhkYXRhLCBqYXZhLm5pby5jaGFyc2V0LlN0YW5kYXJkQ2hhcnNldHMuVVRGXzgpO1xuICAgICAgICByZXR1cm4gZGVjb2RlZFN0cmluZztcbiAgICB9IGVsc2UgaWYgKHBsYXRmb3JtVHlwZSA9PSAnaU9TJykge1xuICAgICAgICBjb25zdCBkZWNvZGVkRGF0YSA9IE5TRGF0YS5hbGxvYygpLmluaXRXaXRoQmFzZTY0RW5jb2RlZFN0cmluZ09wdGlvbnMoYmFzZTY0U3RyaW5nLCAwKTtcbiAgICAgICAgY29uc3QgZGVjb2RlZFN0cmluZyA9IE5TU3RyaW5nLmFsbG9jKCkuaW5pdFdpdGhEYXRhRW5jb2RpbmcoZGVjb2RlZERhdGEsIE5TVVRGOFN0cmluZ0VuY29kaW5nKTtcbiAgICAgICAgcmV0dXJuIGRlY29kZWRTdHJpbmc7XG4gICAgfVxufVxuIl19